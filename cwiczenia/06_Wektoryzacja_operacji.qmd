---
title: "Wstęp do programowania"
subtitle: "Wektoryzacja operacji"
author: "Krzysztof Dyba"
format:
  html:
    toc: true
    toc-title: " "
    embed-resources: true
    code-links:
      - text: Repozytorium
        icon: github
        href: https://github.com/kadyb/intro2025
---

# Wektoryzacja operacji

Wektoryzacja operacji jest techniką programistyczną, która umożliwia jednoczesne
wykonanie działań dla wszystkich elementów obiektu (np. wektora, macierzy czy
listy), zamiast przetwarzania ich jeden po drugim za pomocą pętli. Technika ta
stosowana jest w różnych językach i bibliotekach, np. `NumPy` (Python), `Eigen`
(C++), Julia, i oczywiście R.

Język R jest zoptymalizowany pod kątem operacji wektorowych, co sprawia, że są one
zazwyczaj znacznie wydajniejsze przede wszystkim z powodu zaimplementowania ich
w językach niższego poziomu takich jak C czy Fortran. Kod jest również czytelniejszy
i krótszy niż kod wykorzystujący pętle.

Rozpocznijmy od napisania prostej pętli, która wykona mnożenie elementów wektora
od 1 do 10 przez 2. Iloczyn każdego elementu musimy przechowywać w nowej zmiennej
`y`, zatem należy ją wcześniej zdefiniować jako pusty obiekt (`NULL`).

```{r}
x = 1:10
y = NULL # pusty obiekt
for (i in x) {
  wynik = i * 2
  y = c(y, wynik)
}
y
```

Teraz wykonajmy tę samą operację używając wektoryzacji kodu.

```{r}
y = x * 2
y
```

Iloczyn został obliczony dla każdego elementu wektora `x` bez stosowania
pętli i otrzymaliśmy dokładnie ten sam wynik.

## Recykling

Z założenia wszystkie operacje arytmetyczne, porównawcze oraz logiczne są
zwektoryzowane i stosowane do wektorów element po elemencie.

```{r}
# dodawanie
x = c(1, 2, 3, 4)
y = c(4, 3, 2, 1)
x + y

# porównanie
x = c(1, 2, 3, 4)
y = c(1, 0, 0, 4)
x == y
```

Podczas wykonywania operacji na wektorach o różnych długościach, krótszy wektor
jest powtarzany, tak aby odpowiadał długości dłuższego wektora (jest to tak
zwany recykling). W przypadku, gdy krótszy wektor nie jest wielokrotnością
dłuższego wektora, to zostanie zwrócone ostrzeżenie, a wynikowa długość nie
będzie pełną wielokrotnością. Należy o tym pamiętać, aby uniknąć niepożądanych
skutków.

```{r}
x = 1:6
y = 1:2
x + y # 1+1, 2+2, 3+1, 4+2, 5+1, 6+2
```

```{r}
x = 1:6
x > 3 # 1>3, 2>3, 3>3, 4>3, 5>3, 6>3
```

# Wektoryzacja warunków

Załóżmy, że mamy dany wektor z wartościami ujemnymi oraz dodatnimi i chcemy
odwrócić znak dla wartości ujemnych. Możemy to zrobić używając poniższej pętli.

```{r}
x = -2:2
y = NULL

for (i in 1:length(x)) {
  if (x[i] < 0) {
    y = c(y, -x[i])
  } else {
    y = c(y, x[i])
  }
}
y
```

Jednak, możemy ten kod znacząco uprościć używając zwektoryzowanej instrukcji
warunkowej `ifelse()`, która przyjmuje trzy argumenty:

- testowany warunek (w naszym przypadku `x < 0`),
- zwracana wartość, jeśli element w teście spełni ten warunek,
- zwracana wartość, jeśli element w teście nie spełni tego warunku.

```{r}
x = -2:2
y = ifelse(x < 0, -x, x)
y
```

W funkcji `ifelse()` można zagnieżdżać warunki, aby stworzyć bardziej złożoną
logikę. Jednak, wraz ze wzrostem złożoności mogą stać się trudne do odczytania.
Wtedy lepiej zastosować standardowe instrukcje warunkowe.

```{r}
x = -2:2
ifelse(x < 0,
       "Wartość ujemna",
       ifelse(x == 0, "Zero", "Wartość dodatnia")
       )
```

# Zwektoryzowane funkcje

Oprócz zwektoryzowanych operacji na wektorach czy macierzach, R zapewnia
również bogaty zestaw zwektoryzowanych funkcji dla różnego rodzaju zadań,
np. funkcje matematyczne, statystyczne, przetwarzania tekstu i inne.

```{r}
x = 1:10
```

```{r}
# suma
sum(x)
# pierwiastek
sqrt(x)
# średnia
mean(x)
# odchylenie standardowe
sd(x)
```

Przykładowo, funkcje takie jak `paste()`, `substr()`, `toupper()`, mogą zostać
wykorzystane do zwektoryzowanego przetwarzania wektorów tekstowych.

```{r}
x = c("rower", "budynek", "drzewo")
```

```{r}
# łączenie tekstu
paste(x, collapse = " ")
# wyodrębnienie pierwszej litery
substr(x, start = 1, stop = 1)
# zamiana na wielkie litery
toupper(x)
```

W kontekście danych tekstowych przydatna jest także funkcja `nchar()`, która
zwraca liczbę liter w ciągu znaków.

```{r}
# liczba wyrazów
length(x)
# liczba liter w każdym wyrazie
nchar(x)
```

# Zaawansowane techniki wektoryzacji

Do tej pory omówiliśmy podstawowe techniki wektoryzacji operacji. Niemniej,
dostępne są również dodatkowe narzędzia, w szczególności służące do wektoryzacji
operacji na bardziej złożonych strukturach danych niż wektory. W tym celu stosowana
jest rodzina funkcji `*apply()`.

## Macierz (`apply`)

Funkcja `apply()` wykonuje wybraną funkcję do marginesów macierzy lub tablicy.
Należy zdefiniować dwa argumenty -- `MARGIN`, który przyjmuje wartość 1
(obliczenia dla wierszy) lub 2 (obliczenia dla kolumn) oraz `FUN`, w którym
określamy funkcję, która zostanie zastosowana.

Sprawdźmy teraz dwa przykłady na macierzy składającej się z trzech wierszy i 
czterech kolumn. W pierwszym obliczymy sumę dla każdego wiersza macierzy, a w
drugim sumę dla każdej kolumny. Wyniki zostaną zwrócone jako wektory o
odpowiedniej długości.

```{r}
mat = matrix(1:12, nrow = 3, ncol = 4)
mat
```

```{r}
# suma dla każdego wiersza
apply(mat, MARGIN = 1, FUN = sum)
```

```{r}
# suma dla każdej kolumny
apply(mat, MARGIN = 2, FUN = sum)
```

## Lista (`lapply`)

Funkcja `lapply()` wykonuje wybraną funkcję każdego elementu listy i zwraca
listę o tej samej długości.

Dla przykładu zdefiniujmy listę, która będzie składać się z trzech wektorów
liczbowych i obliczmy średnią dla każdego z nich.

```{r}
lst = list(a = 1:3, b = 4:6, c = 7:9)
# średnia dla każdego wektora listy
lapply(lst, FUN = mean)
```

Podobnie możemy zdefiniować listę, która będzie składać się z wektorów różnego
typu i zwrócić ich długości.

```{r}
lst = list(a = 1:5, b = letters[1:4], c = c(TRUE, FALSE))
# długość każdego wektora listy
lapply(lst, FUN = length)
```

Jeśli chcemy uzyskać wynik w postaci wektora zamiast listy, to powinniśmy użyć
funkcji `sapply()`, która jest podobna do `lapply()`, ale próbuje uprościć
wynik do wektora (lub macierzy), pod warunkiem, że wyniki są tej samej długości
i typu (w przeciwnym razie zwróci listę).

```{r}
# uprość wynik do wektora (jeśli to możliwe)
sapply(lst, FUN = length)
```

## Inne

Wymieniliśmy tylko trzy podstawowe funkcje z rodziny `*apply()`, ale jest
ich o więcej. Dodatkowo, w przypadku bardzo dużych zbiorów danych można
połączyć wektoryzację operacji z przetwarzaniem równoległym wykorzystującym
wiele rdzeni procesora w celu dalszego zwiększenia wydajności.

# Zadania

1. Napisz pętlę, która doda wartości elementów dwóch wektorów `1, 2, 3, 4` i
`4, 3, 2, 1`. Następnie wykonaj to samo działanie, ale używając podejścia
zwektoryzowanego.
2. Dany jest wektor składający się z wyrazów: `okno`, `kot`, `stolik`, `chmura`.
Stwórz nowy wektor, który połączy te wyrazy z ich wersjami pisanymi wielkimi
literami, np. `okno_OKNO`.
3. Dana jest macierz składająca się z 5 wierszy i 5 kolumn o wartościach z
przedziału od 1 do 25. Napisz funkcję, która obliczy różnicę między wartością
maksymalną i minimalną, a następnie zastosuj ją osobno dla kolumn i osobno
dla wierszy bez wykorzystania pętli.
4. Napisz funkcję, która wykona `n` rzutów kostką bez użycia pętli, a następnie
obliczy odsetek w procentach, ile razy wypadła wartość wskazana przez użytkownika.
5. Napisz funkcję, która obliczy wskaźnik masy ciała ze wzoru
$BMI = \frac{masa}{wzrost^2}$ dla wielu pomiarów bez użycia pętli.
